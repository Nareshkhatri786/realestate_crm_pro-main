import React, { useState, useEffect } from 'react';
import Button from './Button';
import Icon from '../AppIcon';

const InteractionLogger = ({ entityId, entityType = 'lead', entityName }) => {
  const [interactions, setInteractions] = useState([]);
  const [showAddModal, setShowAddModal] = useState(false);
  const [filterType, setFilterType] = useState('all');
  const [sortBy, setSortBy] = useState('recent');
  const [searchTerm, setSearchTerm] = useState('');

  // Interaction types
  const interactionTypes = [
    { value: 'call', label: 'Phone Call', icon: 'Phone', color: 'text-blue-600' },
    { value: 'whatsapp', label: 'WhatsApp', icon: 'MessageCircle', color: 'text-green-600' },
    { value: 'email', label: 'Email', icon: 'Mail', color: 'text-purple-600' },
    { value: 'meeting', label: 'Meeting', icon: 'Users', color: 'text-orange-600' },
    { value: 'site_visit', label: 'Site Visit', icon: 'MapPin', color: 'text-red-600' },
    { value: 'note', label: 'Note', icon: 'FileText', color: 'text-gray-600' },
    { value: 'task', label: 'Task', icon: 'CheckSquare', color: 'text-indigo-600' },
    { value: 'document', label: 'Document', icon: 'File', color: 'text-yellow-600' }
  ];

  useEffect(() => {
    loadInteractions();
  }, [entityId]);

  const loadInteractions = () => {
    // Load interactions from localStorage (in production, this would be an API call)
    const savedInteractions = localStorage.getItem(`interactions_${entityId}`);
    if (savedInteractions) {
      setInteractions(JSON.parse(savedInteractions));
    }

    // Also load call logs and WhatsApp messages if they exist
    loadExternalInteractions();
  };

  const loadExternalInteractions = () => {
    // Load call logs
    const callLogs = JSON.parse(localStorage.getItem(`call_logs_${entityId}`) || '[]');
    const callInteractions = callLogs.map(call => ({
      id: `call_${call.id}`,
      type: 'call',
      title: `${call.status === 'answered' ? 'Successful' : 'Attempted'} Call`,
      description: call.notes || `Call ${call.status}${call.duration ? ` - Duration: ${formatDuration(call.duration)}` : ''}`,
      timestamp: new Date(call.timestamp),
      metadata: {
        status: call.status,
        duration: call.duration,
        phone: call.phone
      },
      autoGenerated: true,
      createdBy: call.createdBy
    }));

    // Load WhatsApp messages (mock data for now)
    const whatsappMessages = JSON.parse(localStorage.getItem(`whatsapp_messages_${entityId}`) || '[]');
    const whatsappInteractions = whatsappMessages.map(message => ({
      id: `whatsapp_${message.id}`,
      type: 'whatsapp',
      title: message.direction === 'sent' ? 'WhatsApp Message Sent' : 'WhatsApp Message Received',
      description: message.content || message.template?.name || 'WhatsApp interaction',
      timestamp: new Date(message.timestamp),
      metadata: {
        messageId: message.messageId,
        status: message.status,
        direction: message.direction
      },
      autoGenerated: true,
      createdBy: message.createdBy
    }));

    // Merge with existing interactions
    const existingInteractions = JSON.parse(localStorage.getItem(`interactions_${entityId}`) || '[]');
    const allInteractions = [
      ...existingInteractions,
      ...callInteractions,
      ...whatsappInteractions
    ].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

    // Remove duplicates based on ID
    const uniqueInteractions = allInteractions.filter((interaction, index, self) =>
      index === self.findIndex(i => i.id === interaction.id)
    );

    setInteractions(uniqueInteractions);
  };

  const saveInteraction = (interactionData) => {
    const newInteraction = {
      id: `interaction_${Date.now()}`,
      entityId,
      entityType,
      entityName,
      ...interactionData,
      timestamp: new Date(),
      createdBy: localStorage.getItem('currentUser') || 'System',
      autoGenerated: false
    };

    const updatedInteractions = [newInteraction, ...interactions];
    setInteractions(updatedInteractions);

    // Save to localStorage
    const manualInteractions = updatedInteractions.filter(i => !i.autoGenerated);
    localStorage.setItem(`interactions_${entityId}`, JSON.stringify(manualInteractions));

    // Also save to global interactions log
    const globalInteractions = JSON.parse(localStorage.getItem('all_interactions') || '[]');
    globalInteractions.unshift(newInteraction);
    localStorage.setItem('all_interactions', JSON.stringify(globalInteractions.slice(0, 1000))); // Keep last 1000

    return newInteraction;
  };

  const deleteInteraction = (interactionId) => {
    const updatedInteractions = interactions.filter(i => i.id !== interactionId);
    setInteractions(updatedInteractions);

    // Update localStorage
    const manualInteractions = updatedInteractions.filter(i => !i.autoGenerated);
    localStorage.setItem(`interactions_${entityId}`, JSON.stringify(manualInteractions));
  };

  const getInteractionIcon = (type) => {
    const config = interactionTypes.find(t => t.value === type);
    return config ? { icon: config.icon, color: config.color } : { icon: 'Circle', color: 'text-gray-600' };
  };

  const formatDuration = (seconds) => {
    if (seconds < 60) return `${seconds}s`;
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}m ${remainingSeconds}s`;
  };

  const getEngagementScore = () => {
    if (interactions.length === 0) return 0;
    
    const weights = {
      call: 3,
      meeting: 5,
      site_visit: 6,
      whatsapp: 2,
      email: 2,
      note: 1,
      task: 1,
      document: 1
    };

    const recentInteractions = interactions.filter(
      i => new Date() - new Date(i.timestamp) <= 30 * 24 * 60 * 60 * 1000 // Last 30 days
    );

    const score = recentInteractions.reduce((total, interaction) => {
      return total + (weights[interaction.type] || 1);
    }, 0);

    return Math.min(100, Math.round(score * 2)); // Scale to 0-100
  };

  const filteredInteractions = interactions
    .filter(interaction => {
      if (filterType !== 'all' && interaction.type !== filterType) return false;
      if (searchTerm && !interaction.title.toLowerCase().includes(searchTerm.toLowerCase()) &&
          !interaction.description.toLowerCase().includes(searchTerm.toLowerCase())) return false;
      return true;
    })
    .sort((a, b) => {
      switch (sortBy) {
        case 'oldest':
          return new Date(a.timestamp) - new Date(b.timestamp);
        case 'type':
          return a.type.localeCompare(b.type);
        default: // recent
          return new Date(b.timestamp) - new Date(a.timestamp);
      }
    });

  const groupedInteractions = filteredInteractions.reduce((groups, interaction) => {
    const date = new Date(interaction.timestamp).toDateString();
    if (!groups[date]) {
      groups[date] = [];
    }
    groups[date].push(interaction);
    return groups;
  }, {});

  return (
    <div className="space-y-6">
      {/* Header with Stats */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
          <h3 className="text-xl font-semibold text-text-primary mb-2">
            Interaction Timeline
          </h3>
          <div className="flex items-center space-x-4 text-sm text-text-secondary">
            <span>{interactions.length} total interactions</span>
            <span>â€¢</span>
            <span>Engagement Score: {getEngagementScore()}%</span>
          </div>
        </div>
        
        <div className="flex items-center space-x-3 mt-4 sm:mt-0">
          <Button
            variant="outline"
            iconName="Download"
            onClick={() => exportInteractions()}
          >
            Export
          </Button>
          <Button
            variant="primary"
            iconName="Plus"
            onClick={() => setShowAddModal(true)}
          >
            Log Interaction
          </Button>
        </div>
      </div>

      {/* Filters and Search */}
      <div className="bg-surface border border-border rounded-radius-md p-4">
        <div className="flex flex-col sm:flex-row sm:items-center space-y-3 sm:space-y-0 sm:space-x-4">
          <div className="flex-1">
            <div className="relative">
              <Icon name="Search" size={16} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-text-secondary" />
              <input
                type="text"
                placeholder="Search interactions..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-3 py-2 border border-border rounded-radius-sm focus:outline-none focus:ring-2 focus:ring-primary"
              />
            </div>
          </div>
          
          <div className="flex items-center space-x-3">
            <select
              value={filterType}
              onChange={(e) => setFilterType(e.target.value)}
              className="px-3 py-2 border border-border rounded-radius-sm focus:outline-none focus:ring-2 focus:ring-primary"
            >
              <option value="all">All Types</option>
              {interactionTypes.map(type => (
                <option key={type.value} value={type.value}>
                  {type.label}
                </option>
              ))}
            </select>
            
            <select
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
              className="px-3 py-2 border border-border rounded-radius-sm focus:outline-none focus:ring-2 focus:ring-primary"
            >
              <option value="recent">Most Recent</option>
              <option value="oldest">Oldest First</option>
              <option value="type">By Type</option>
            </select>
          </div>
        </div>
      </div>

      {/* Interaction Timeline */}
      {filteredInteractions.length === 0 ? (
        <div className="bg-surface border border-border rounded-radius-md">
          <div className="text-center py-12">
            <Icon name="Activity" size={48} className="text-text-secondary mx-auto mb-4" />
            <h5 className="text-lg font-medium text-text-primary mb-2">No Interactions Found</h5>
            <p className="text-text-secondary mb-4">
              {searchTerm || filterType !== 'all' 
                ? 'Try adjusting your filters or search terms'
                : `Start logging interactions with ${entityName || 'this contact'}`
              }
            </p>
            {!searchTerm && filterType === 'all' && (
              <Button
                variant="primary"
                iconName="Plus"
                onClick={() => setShowAddModal(true)}
              >
                Log First Interaction
              </Button>
            )}
          </div>
        </div>
      ) : (
        <div className="space-y-6">
          {Object.entries(groupedInteractions).map(([date, dayInteractions]) => (
            <div key={date} className="bg-surface border border-border rounded-radius-md">
              <div className="border-b border-border p-4">
                <h4 className="text-lg font-medium text-text-primary">
                  {new Date(date).toLocaleDateString('en-US', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                  })}
                </h4>
                <p className="text-sm text-text-secondary">
                  {dayInteractions.length} interaction{dayInteractions.length !== 1 ? 's' : ''}
                </p>
              </div>
              
              <div className="divide-y divide-border">
                {dayInteractions.map(interaction => {
                  const iconConfig = getInteractionIcon(interaction.type);
                  return (
                    <div key={interaction.id} className="p-4">
                      <div className="flex items-start space-x-4">
                        <div className={`mt-1 ${iconConfig.color}`}>
                          <Icon name={iconConfig.icon} size={20} />
                        </div>
                        
                        <div className="flex-1">
                          <div className="flex items-start justify-between">
                            <div>
                              <h5 className="font-medium text-text-primary">
                                {interaction.title}
                              </h5>
                              <div className="flex items-center space-x-2 text-sm text-text-secondary mt-1">
                                <span>{new Date(interaction.timestamp).toLocaleTimeString()}</span>
                                <span>â€¢</span>
                                <span>{interaction.createdBy}</span>
                                {interaction.autoGenerated && (
                                  <>
                                    <span>â€¢</span>
                                    <span className="text-primary">Auto-logged</span>
                                  </>
                                )}
                              </div>
                            </div>
                            
                            {!interaction.autoGenerated && (
                              <div className="flex items-center space-x-2">
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  iconName="Edit"
                                  onClick={() => {/* Edit interaction */}}
                                  title="Edit interaction"
                                />
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  iconName="Trash2"
                                  onClick={() => deleteInteraction(interaction.id)}
                                  title="Delete interaction"
                                  className="text-error hover:text-error"
                                />
                              </div>
                            )}
                          </div>
                          
                          {interaction.description && (
                            <div className="mt-2 text-sm text-text-primary bg-background p-3 rounded-radius-sm">
                              {interaction.description}
                            </div>
                          )}
                          
                          {/* Metadata */}
                          {interaction.metadata && Object.keys(interaction.metadata).length > 0 && (
                            <div className="mt-2 flex flex-wrap gap-2">
                              {Object.entries(interaction.metadata).map(([key, value]) => (
                                <span
                                  key={key}
                                  className="inline-flex items-center px-2 py-1 text-xs bg-background border border-border rounded"
                                >
                                  <span className="capitalize">{key.replace('_', ' ')}:</span>
                                  <span className="ml-1 font-medium">{value}</span>
                                </span>
                              ))}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Add Interaction Modal */}
      {showAddModal && (
        <AddInteractionModal
          interactionTypes={interactionTypes}
          onSave={(data) => {
            saveInteraction(data);
            setShowAddModal(false);
          }}
          onCancel={() => setShowAddModal(false)}
        />
      )}
    </div>
  );

  function exportInteractions() {
    const exportData = {
      entity: { id: entityId, type: entityType, name: entityName },
      interactions: interactions,
      exportDate: new Date(),
      engagementScore: getEngagementScore()
    };
    
    const dataStr = JSON.stringify(exportData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `interactions_${entityName || entityId}_${new Date().toISOString().split('T')[0]}.json`;
    link.click();
  }
};

// Add Interaction Modal Component
const AddInteractionModal = ({ interactionTypes, onSave, onCancel }) => {
  const [formData, setFormData] = useState({
    type: 'note',
    title: '',
    description: '',
    outcome: '',
    nextAction: '',
    scheduledDate: '',
    priority: 'medium'
  });

  const [errors, setErrors] = useState({});

  const priorities = [
    { value: 'low', label: 'Low', color: 'text-gray-600' },
    { value: 'medium', label: 'Medium', color: 'text-yellow-600' },
    { value: 'high', label: 'High', color: 'text-red-600' }
  ];

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.title.trim()) {
      newErrors.title = 'Title is required';
    }
    
    if (!formData.description.trim()) {
      newErrors.description = 'Description is required';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (validateForm()) {
      onSave(formData);
    }
  };

  const selectedType = interactionTypes.find(t => t.value === formData.type);

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-surface rounded-radius-lg max-w-lg w-full max-h-[90vh] overflow-y-auto">
        <div className="p-6 border-b border-border">
          <h3 className="text-xl font-semibold text-text-primary">Log New Interaction</h3>
        </div>
        
        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          {/* Interaction Type */}
          <div>
            <label className="block text-sm font-medium text-text-primary mb-2">
              Interaction Type *
            </label>
            <select
              value={formData.type}
              onChange={(e) => setFormData({ ...formData, type: e.target.value })}
              className="w-full px-3 py-2 border border-border rounded-radius-sm focus:outline-none focus:ring-2 focus:ring-primary"
            >
              {interactionTypes.map(type => (
                <option key={type.value} value={type.value}>
                  {type.label}
                </option>
              ))}
            </select>
          </div>

          {/* Title */}
          <div>
            <label className="block text-sm font-medium text-text-primary mb-2">
              Title *
            </label>
            <input
              type="text"
              value={formData.title}
              onChange={(e) => setFormData({ ...formData, title: e.target.value })}
              className={`w-full px-3 py-2 border rounded-radius-sm focus:outline-none focus:ring-2 focus:ring-primary ${
                errors.title ? 'border-error' : 'border-border'
              }`}
              placeholder={`e.g., ${selectedType?.label} with client`}
            />
            {errors.title && <p className="text-sm text-error mt-1">{errors.title}</p>}
          </div>

          {/* Description */}
          <div>
            <label className="block text-sm font-medium text-text-primary mb-2">
              Description *
            </label>
            <textarea
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              className={`w-full px-3 py-2 border rounded-radius-sm focus:outline-none focus:ring-2 focus:ring-primary ${
                errors.description ? 'border-error' : 'border-border'
              }`}
              rows={3}
              placeholder="Describe what happened during this interaction..."
            />
            {errors.description && <p className="text-sm text-error mt-1">{errors.description}</p>}
          </div>

          {/* Outcome */}
          <div>
            <label className="block text-sm font-medium text-text-primary mb-2">
              Outcome
            </label>
            <input
              type="text"
              value={formData.outcome}
              onChange={(e) => setFormData({ ...formData, outcome: e.target.value })}
              className="w-full px-3 py-2 border border-border rounded-radius-sm focus:outline-none focus:ring-2 focus:ring-primary"
              placeholder="What was the result of this interaction?"
            />
          </div>

          {/* Next Action */}
          <div>
            <label className="block text-sm font-medium text-text-primary mb-2">
              Next Action
            </label>
            <input
              type="text"
              value={formData.nextAction}
              onChange={(e) => setFormData({ ...formData, nextAction: e.target.value })}
              className="w-full px-3 py-2 border border-border rounded-radius-sm focus:outline-none focus:ring-2 focus:ring-primary"
              placeholder="What should be done next?"
            />
          </div>

          {/* Scheduled Date for Follow-up */}
          <div>
            <label className="block text-sm font-medium text-text-primary mb-2">
              Follow-up Date
            </label>
            <input
              type="datetime-local"
              value={formData.scheduledDate}
              onChange={(e) => setFormData({ ...formData, scheduledDate: e.target.value })}
              className="w-full px-3 py-2 border border-border rounded-radius-sm focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>

          {/* Priority */}
          <div>
            <label className="block text-sm font-medium text-text-primary mb-2">
              Priority
            </label>
            <div className="flex space-x-3">
              {priorities.map(priority => (
                <label
                  key={priority.value}
                  className={`flex items-center space-x-2 p-3 border rounded-radius-sm cursor-pointer transition-colors ${
                    formData.priority === priority.value
                      ? 'border-primary bg-primary-50'
                      : 'border-border hover:bg-background'
                  }`}
                >
                  <input
                    type="radio"
                    name="priority"
                    value={priority.value}
                    checked={formData.priority === priority.value}
                    onChange={(e) => setFormData({ ...formData, priority: e.target.value })}
                    className="sr-only"
                  />
                  <span className={`text-sm font-medium ${priority.color}`}>
                    {priority.label}
                  </span>
                </label>
              ))}
            </div>
          </div>

          {/* Actions */}
          <div className="flex justify-end space-x-3 pt-4">
            <Button
              type="button"
              variant="outline"
              onClick={onCancel}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              variant="primary"
            >
              Save Interaction
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default InteractionLogger;